name: deploy
 
on:
  push:
    branches:
      - main 

  workflow_dispatch:

permissions:
  actions: read
  checks: write
  contents: none
  deployments: write
  issues: none
  packages: none
  pull-requests: write
  repository-projects: none
  security-events: none
  statuses: write

jobs:
  setup:
    runs-on: macos-11

    steps:
      - name: Checkout
        uses: actions/checkout@v3

  build:
    runs-on: macos-11

    needs: setup

    strategy:
      matrix:
        node-version: [14.x, 16.x]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          architecture: x64

      - name: Install node modules
        run: yarn install

  deploy-ios:
    runs-on: macos-11

    needs: build

    strategy:
      matrix:
        node-version: [14.x, 16.x]

    steps:
      - name: Set Xcode version
        run: sudo xcode-select -s "/Applications/Xcode_13.2.1.app"

      - name: Show Xcode version
        run: xcodebuild -version

      - name: Import iOS CodeSign Certificates
        if: github.actor != 'dependabot[bot]'
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          create-keychain: true
          keychain-password: ${{ steps.develop-certificate.outputs.keychain-password }}
          p12-file-base64: ${{ secrets.DISTRIBUTION_CERTIFICATES_FILE_BASE64 }}
          p12-password: ${{ secrets.CERTIFICATES_PASSWORD }}

      - name: Download Provisioning Profiles
        if: github.actor != 'dependabot[bot]'
        uses: poad/apple-provisioning-profiles-downloader@v1.0.3
        with: 
          bundle-id: 'com.github.poad.hydroApp'
          profile-type: IOS_APP_STORE
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}

      - name: Checkout
        uses: actions/checkout@v3

      - name: "#️⃣ Update Build Number"
        id: buildnumber
        uses: poad/xcode-build-number-auto-update@v1
        with:
          path: ./ios/Runner/Info.plist
          new-number: ${{ github.run_number }}

      - name: Generate exportOptions.plist
        if: github.actor != 'dependabot[bot]'
        env:
          PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
        run: |
          touch exportOptions.plist
          echo "${PLIST}" >> exportOptions.plist
          cat exportOptions.plist

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          architecture: x64

      - name: Install node modules
        run: yarn install

      - name: Configure Homebrew cache
        uses: actions/cache@v2
        with:
          path: |
            ~/Library/Caches/Homebrew/foo--*
            ~/Library/Caches/Homebrew/downloads/*--foo-*
          key: brew-${{ hashFiles('.github/brew-formulae') }}
          restore-keys: brew-

      - name: Add '--no-document' to gemrc
        run: |
          echo "install: --no-document" >> ~/.gemrc
          echo "update: --no-document" >> ~/.gemrc

      - name: Update Homebrew
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          brew update --preinstall
          cat "$(brew --repository)/Library/Taps/homebrew/homebrew-core/Formula/watchman.rb" > .github/brew-formulae
          sudo rm '/usr/local/bin/2to3'
          brew link --overwrite python@3.9
          brew upgrade

      - name: Setup watchman
        env:
          HOMEBREW_NO_AUTO_UPDATE: 1
        run: |
          brew install watchman
          sudo gem update

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6
          bundler-cache: true

      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: '2.0.6'

      - name: Install cocoapods
        run: sudo gem install cocoapods

      - name: flutter pub get
        run: flutter pub get

      - name: iOS app build
        run: flutter build ios --no-tree-shake-icons --no-codesign

      - name: iOS app build
        uses: devbotsxyz/xcode-archive@main
        with:
          workspace: ios/Runner.xcworkspace
          scheme: Runner
          archive-path: ios/Runner.xcarchive
          code-sign-identity: destination

      - name: iOS app export
        env:
          RCT_NO_LAUNCH_PACKAGER: 1
        run: xcodebuild -exportArchive -archivePath ./ios・Runner.xcarchive -exportPath $(pwd)/build/Runner.ipa -exportOptionsPlist exportOptions.plist -allowProvisioningUpdates

      - name: Lookup IPA file
        run: |
          ipa_file_path=$(pwd)/build/Runner.ipa
          if [ -z ${ipa_file_path} ]; then
            echo "IPA file is not found" >2
            exit 1;
          fi
          echo "ipa_file_path=${ipa_file_path}" >> $GITHUB_ENV

      - name: Upload IPA file to DeployGate
        env:
          FILE_PATH: ${{ env.ipa_file_path }}
        run: |
          RESULT=$(curl -sSL \
            -H "Authorization: token ${{ secrets.DEPLOYGATE_API_TOKEN }}" \
            -F "file=@${FILE_PATH}" \
            "https://deploygate.com/api/users/poad/apps")
          ERR=$(echo ${RESULT} | jq -c ".error")
          if [ "${ERR}" = "true" ]; then
            echo ${RESULT}
            exit 1;
          fi

  deploy-android:
    runs-on: macos-11

    needs: build

    strategy:
      matrix:
        node-version: [14.x, 16.x]

    steps:

      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: '2.0.6'

      - name: Checkout
        uses: actions/checkout@v3

      - name: Import Android CodeSign Certificates
        run: |
          ANDROID_CERTIFICATES_FILE_PATH=$(pwd)/android/keystore.p12
          echo "ANDROID_CERTIFICATES_FILE_PATH=${ANDROID_CERTIFICATES_FILE_PATH}" >> $GITHUB_ENV
          echo ${{ secrets.ANDROID_CERTIFICATES_FILE_BASE64 }} | base64 -D -o ${ANDROID_CERTIFICATES_FILE_PATH}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          architecture: x64

      - name: Install node modules
        run: yarn install

      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11

      - name: Build for android
        run: |
          flutter pub get && \
          flutter build apk --no-tree-shake-icons

      - name: Lookup APK file
        run: |
          apk_file_path=$(ls ./build/app/outputs/apk/release/*.apk)
          if [ -z ${apk_file_path} ]; then
            echo "APK file is not found" >2
            exit 1;
          fi
          echo "apk_file_path=${apk_file_path}" >> $GITHUB_ENV

      - name: Upload APK file to DeployGate
        env:
          FILE_PATH: ${{ env.apk_file_path }}
        run: |
          RESULT=$(curl -sSL \
            -H "Authorization: token ${{ secrets.DEPLOYGATE_API_TOKEN }}" \
            -F "file=@${FILE_PATH}" \
            "https://deploygate.com/api/users/poad/apps")
          echo ${RESULT}
          ERR=$(echo ${RESULT} | jq -c ".error")
          if [ "${ERR}" = "true" ]; then
            echo ${RESULT}
            exit 1;
          fi
